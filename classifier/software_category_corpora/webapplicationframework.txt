A web application framework (WAF) is a software framework that is designed to support the development of dynamic websites, web applications, web services and web resources. The framework aims to alleviate the overhead associated with common activities performed in web development. For example, many frameworks provide libraries for database access, templating frameworks and session management, and they often promote code reuse.[1] For a comparison of concrete web application frameworks, see Comparison of web application frameworks.
        2.1 Model–view–controller (MVC)
            2.1.1 Push-based vs. pull-based
        2.2 Three-tier organization
    3 Framework applications
        3.1 General-purpose website frameworks
        3.2 Discussion forums, wikis and weblogs
        3.3 Organizational portals
        3.4 Content management systems (CMS)
    4 Features
        4.1 Web template system
        4.2 Caching
        4.3 Security
        4.4 Database access, mapping and configuration
        4.5 Scaffolding
        4.6 URL mapping
        4.7 Ajax
        4.8 Web services
        4.9 Web resources
    5 See also


Most web application frameworks are based on the model–view–controller (MVC) pattern.
Model–view–controller (MVC)
Main article: Model–view–controller

Many frameworks follow the MVC architectural pattern to separate the data model with business rules from the user interface. This is generally considered a good practice as it modularizes code, promotes code reuse, and allows multiple interfaces to be applied. In web applications, this permits different views to be presented, such as web pages for humans, and web service interfaces for remote applications.
Push-based vs. pull-based

Most MVC frameworks follow a push-based architecture also called "action-based". These frameworks use actions that do the required processing, and then "push" the data to the view layer to render the results.[5] Struts, Django, Ruby on Rails, Symfony, Yii, Spring MVC, Stripes, Play, CodeIgniter and Struts2[6] are good examples of this architecture. An alternative to this is pull-based architecture, sometimes also called "component-based". These frameworks start with the view layer, which can then "pull" results from multiple controllers as needed. In this architecture, multiple controllers can be involved with a single view. Lift, Tapestry, JBoss Seam, JavaServer Faces, (µ)Micro, and Wicket are examples of pull-based architectures.
